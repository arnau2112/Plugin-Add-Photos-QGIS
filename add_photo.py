# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Inserir_Fotografies
                                 A QGIS plugin
 Aquest plugin serveix per a inserir fotografies
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-16
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Arnau Solà Tatjé
        email                : becari.a.sola@icgc.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
from qgis.utils import iface
from PyQt5.QtCore import QVariant
from qgis.core import QgsField
from deep_translator import GoogleTranslator
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QFileDialog
from qgis.core import QgsProject
from qgis.core import QgsEditorWidgetSetup





# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .add_photo_dialog import Inserir_FotografiesDialog
import os.path
import os


class Inserir_Fotografies:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Inserir_Fotografies_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Inserir_Fotografies')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Inserir_Fotografies', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/add_photo/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Inserir_Fotografies'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_folder(self):
        folder = QFileDialog.getExistingDirectory(
            self.dlg, "Selecciona la carpeta con los documentos", "")
        if folder:
            self.dlg.lineEdit_2.setText(folder)
            self.folder_path = folder

    def actualizar_campos(self):
        nombre_capa = self.dlg.comboBox.currentText()
        capas = QgsProject.instance().mapLayersByName(nombre_capa)

        layer = capas[0]  
        lista = []

        for i in layer.fields():
            nom = i.name()
            lista.append(nom)

        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItems(lista)

        


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Inserir_FotografiesDialog()
            carpeta = self.dlg.pushButton.clicked.connect(self.select_output_folder)


        QMessageBox.information(None, "Plugin inserir fotografies", "Aquest plugin serveix per adjuntar documents PDF, JPEG o PNG a les geometries seleccionades. El nom del document extern ha de ser el mateix per al cual es fa el join (normalment el camp ID) però sense el format (PDF, JPEG, etc).")

         # Obtener todas las capas cargadas en el proyecto
        layers = QgsProject.instance().mapLayers().values()
        # Crear una lista para los nombres de las capas
        layer_names = [layer.name() for layer in layers]
        # Añadir los nombres de las capas al comboBox
        self.dlg.comboBox.addItems(layer_names)

       # Conectar el cambio de capa al método que actualiza los campos
        self.dlg.comboBox.currentIndexChanged.connect(self.actualizar_campos)
      
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems([".pdf",".png", ".jpeg"])
       

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            layer1 = self.dlg.comboBox.currentText()
            layer = QgsProject.instance().mapLayersByName(layer1)[0]

            capa_join = self.dlg.comboBox_3.currentText()
            print(capa_join)
            field_name = self.dlg.lineEdit.text()

            if not layer.isEditable():
                layer.startEditing()
                

            noms_camps = []
            for f in layer.fields():
                noms_camps.append(f.name())
                
            if field_name not in noms_camps:
                layer.dataProvider().addAttributes([QgsField(field_name, QVariant.String)])
                layer.updateFields()
            else:
                QMessageBox.warning(None, "Capa", 'Actualment, ja hi ha una capa amb el mateix nom dintre la taula datributs. Proveu un altre nom.')
                    
                    


            # Añadir campo si no existe
            #if field_name not in [f.name() for f in layer.fields()]:
               # layer.dataProvider().addAttributes([QgsField(field_name, QVariant.String)])
                #layer.updateFields()

            # Configurar widget ExternalResource
            editor_widget_setup = QgsEditorWidgetSetup(
                'ExternalResource', 
                {
                    'FileWidget': True,
                    'FileWidgetButton': True,        # Botón clicable (hiperenlace)
                    'DocumentViewer': 1,
                    'RelativeStorage': 1,  # 0 para ruta absoluta, 1 para relativa
                    'StorageMode': 0,
                    'DocumentViewerHeight': 200,
                    'FileWidgetButton': True,
                    'DocumentViewerWidth': 200,
                    'UseLink': True,
                    'FileWidgetFilter': 'Images (*.png *.jpg *.jpeg *.bmp *.pdf)'
                    
                })

            index = layer.fields().indexFromName(field_name)
            layer.setEditorWidgetSetup(index, editor_widget_setup)

            layer.commitChanges()

            print(layer.fields().names())

            layer.startEditing()
            

          

            document = self.dlg.comboBox_2.currentText()
            carpeta = self.folder_path
            print(carpeta)

            #s'introdueixen els pdf, la metodologia es la seguent:
            #s'escollegeixen els arxius acabats en format .PDF, es junten amb el directori de la carpeta per a tenir el link sencer i correcta de cada
            #pdf, s'agafa la part només del nom i es va comparant cada nom amb el ID_FLUX, que conté tots els noms també
            #quan els dos son iguals, s'incorpora el PDF en el camp
            contenido = os.listdir(carpeta)
            for i in contenido:
                if i.endswith(document):
                    ruta_pdf = os.path.normpath(os.path.join(carpeta, i))
                    print(ruta_pdf)
                    nom = i.split('.')[0]
                    print(nom)
                    for j in layer.getFeatures():
                        valor = str(j[capa_join])
                        if valor == nom:
                            layer.changeAttributeValue(j.id(),layer.fields().indexOf(field_name),ruta_pdf)
                            
                        
                    
            layer.commitChanges()
